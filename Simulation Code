# Importing packages
import numpy as np
import simpy
from numpy import random



class Nature(object):
    def __init__(self, env, p_spread, x_axis_size, y_axis_size, start_x, start_y):
        self.env = env
        self.p_spread = p_spread
        self.resource = simpy.Resource(env, capacity = 1) 
        self.x_axis_size = x_axis_size
        self.y_axis_size = y_axis_size
        self.start_x = start_x
        self.start_y = start_y

    def spread(self, array):
        directions = [(-1, 0), #up
                      (1, 0), #down
                      (0, 1), #right
                      (0, -1)] # left
        
        p = self.p_spread/100
        
        ones_indices = np.argwhere(array == 1)
        
        for x, y in ones_indices:
            
            for dx, dy in directions:
                nx, ny = x + dx, y + dy
                    #nx/ny = coords for neighbouring cells
                    
                if 0 <= nx < array.shape[0] and 0 <= ny < array.shape[1] and array[nx, ny] == 0:
                        #Required parameters, checked for every neighbouring cell
                        
                    if random.random() < p:
                        array[nx, ny] = 1
                    
        return array



def run_spread(env, array, nature):
    while True:
        with nature.resource.request() as request:
            yield request
            
            array = nature.spread(array)
            
            print(f"\nTime {env.now + 1}:")
            print(array)
                #Printing the time value and array at that time
            
            if np.all(array == 1):
                print(f"\nThe map is completely filled after {env.now + 1} units of time")
                return
                    #Checking if the invasive species has completely taken over the environment (array)
            
        yield env.timeout(1)
            
        


def simulate_spread(env, p_spread, x_axis_size, y_axis_size, start_x, start_y):
    nature = Nature(env, p_spread, x_axis_size, y_axis_size, start_x, start_y)
    
    array = random.randint(1, size = (x_axis_size, y_axis_size))
    array[start_y - 1, start_x - 1] = 1
        #Setting coords for the species start location
    
    return run_spread(env, array, nature)





def get_user_input():
    
    try:
        p_spread = (input("As a percentage, what is the probability that the invasive species spreads to a neighbouring location? "))
        x_axis_size = (input("Enter the size of the x-axis for the map: "))
        y_axis_size = (input("Enter the size of the y-axis for the map: "))
        start_x = input("Enter starting x coord: ")
        start_y = input("Enter starting y coord: ")
        
        
        
        if not (p_spread.isdigit() and x_axis_size.isdigit() and y_axis_size.isdigit() and start_x.isdigit() and start_y.isdigit()):
            #If any of these are not digits 
            print("Please input integer values. Using default values (25, 10, 10, random start coords)")
            params = [25, 10, 10, random.randint(0, 10), random.randint(0, 10)]
            
        p_spread = int(p_spread)
        x_axis_size = int(x_axis_size)
        y_axis_size = int(y_axis_size)
        start_x = int(start_x)
        start_y = int(start_y)
        
        params = [p_spread, x_axis_size, y_axis_size, start_x, start_y]
        
    except ValueError:
        print("An error occured, using default values (25, 10, 10, random start coords)")
        params = [25, 10, 10, random.randint(0, 10), random.randint(0, 10)]
    
    return params



def main():
    random.seed(13)
    
    p_spread, x_axis_size, y_axis_size, start_x, start_y = get_user_input()
    
    env = simpy.Environment()
    
    env.process(simulate_spread(env, p_spread, x_axis_size, y_axis_size, start_x, start_y))
    
    env.run(until = 15)
    

if __name__ == "__main__":
    main()
    